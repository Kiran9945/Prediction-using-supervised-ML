# -*- coding: utf-8 -*-
"""student percentage

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sUg6NCaKNjeTJ0pOXKbk6VyzISPf-sS1
"""

#importing required libraries
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from matplotlib import style

#reading data from csv file
data = pd.read_csv("/score.csv") 
print("Data imported sucessfully")
data.head(8)  


#plotting the data
style.use('ggplot')
data.plot(x='Hours',y='Scores',style='o')
plt.title('Hours vs Percentage')
plt.xlabel('Hours Studied')
plt.ylabel('percentage scored')
plt.grid(True)
plt.show()

#Divide the data into input and output form
x=data.iloc[:,:-1].values
y=data.iloc[:,-1].values

#Divide the data into training and testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=89)

#Training the algorithm
from sklearn.linear_model import LinearRegression 
regressor =LinearRegression() 
regressor.fit(x_train,y_train) 
print('Training completed')

#plotting regression values across original values
plt.scatter(x_train,y_train)
plt.plot(x_train,regressor.predict(x_train),color='y')
plt.show()

#predicting the values
y_pred = regressor.predict(x_test) 
print(y_pred)

#compare actual vs predicted
final=pd.DataFrame({'Actual':y_test,'Predicted':y_pred})
final

#Predicting own values
hour=9.25
own=regressor.predict([[9.25]])
print("No of hours:{}".format(hour))
print("Predicted score:{}".format(own))

#Evaluating performance of the algorithm
from sklearn import metrics 
error=metrics.mean_absolute_error(y_test, y_pred) 
print('Mean Absolute Error:',error) 